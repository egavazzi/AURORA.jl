function Xs = O_e_2nd_dist(Es,E0in,Eionization,s_or_c,AURORA_root_directory)
% O_e_2nd_dist - 2nd:ary electron energy spectra for ionisation of O.
%
% Calling:
%  Xs = O_e_2nd_dist(Es,Ep)
% Input:
%  Es - energy of secondar electrons,
%  Ep - energy of primary electrons,
%  extra_args - argument used to select calculation of integrated
%               electron spectra between Es(i1) and Es(i1+1)
% Output:
%  Xs - spectra of secondary electrons
%
% NOTE: Unnormalized!
% 
% Source: Itikawa and Ichimura 1990

% Equation and parameters from M.H. Rees [1989]
% $$$ I = 13.62; % (eV) Ionization energy
% $$$ 
% $$$ W = Es + I;
% $$$ 
% $$$ Xs = (W).^(-1).*exp(-W/31.5-339*exp(-W/2.49)).* ...
% $$$      log(max(0,real((Ep.^.5+(Ep-W).^.5)./(Ep.^.5-(Ep-W).^.5))));
% $$$ 
% $$$ Xs(Es>(Ep+I)/2) = 0;
% $$$ Xs(~isfinite(Xs)) = 0;
% $$$ 
% $$$ if ~all(isreal(Xs))
% $$$   keyboard
% $$$ end

%% Equation from Ittikawa

persistent Q E4Q Eionizations

if nargin < 5
  disp('Error with the O_e_2nd_dist function, lacks the AURORA root directory argument')
end

if isempty(Q) || ~all(E4Q(1:min(numel(Es),numel(E4Q)))==Es(1:min(numel(Es),numel(E4Q)))) || size(Es,2) > size(E4Q,2)
  try
  e_2nd_s_files = dir(fullfile(AURORA_root_directory,'E_cascadings','O'));
    for i1 = 1:numel(e_2nd_s_files),
      if ~ e_2nd_s_files(i1).isdir
        try
          load(fullfile(AURORA_root_directory,...
                        'E_cascadings','O',...
                        e_2nd_s_files(i1).name),...
               'E4Q')
%           if isequal(E4Q,Es)
            if all(E4Q(1:min(numel(Es),numel(E4Q)))==Es)
            % then we have found a match, so load
            fprintf('Loading cascading-matrices from file: %s\n',e_2nd_s_files(i1).name)
            load(fullfile(AURORA_root_directory,...
                         'E_cascadings','O',...
                         e_2nd_s_files(i1).name),...
                'E4Q',...
                'Q',...
                'Eionizations')
            foundem = 1;
            % And break the loop already
            break
          end
        catch
        end
      end
    end
  catch
  fprintf('Could not find file with matching energy grid\n')
  fprintf('Starting to calculate the requested cascading-matrices\n')
  end
end

E_parameters = [100, 200, 500, 1000 2000];
B_p =         [7.18 4.97 2.75 1.69 1.02]*1e-22; % 
A_p =         [12.6 13.7 14.1 14.0 13.7];

Ep = E0in;
if min(E_parameters)<Ep & Ep < max(E_parameters)
  A = interp1(E_parameters,A_p,Ep);
  B = interp1(E_parameters,B_p,Ep);
elseif Ep <= min(E_parameters)
  A = A_p(1);
  B = B_p(1);
else
  A = A_p(end);
  B = B_p(end);
end
Eionizations = [13.618
                16.9
                18.6
                28.5];
A = A*1.25;

if isempty(Q) || ~all(E4Q(1:min(numel(Es),numel(E4Q)))==Es(1:min(numel(Es),numel(E4Q)))) || size(Es,2) > size(E4Q,2)
  E4Q = Es;
  Q = zeros(numel(Es),numel(Es),numel(Eionization)); 
  dE = diff(Es);dE = dE([1:end,end]);
  disp('Pre-calculating all energy-degradations for e - O-ionizing collisions.')
  disp('This will take a bit of time.')
  disp(['Starting at: ',datestr(now,'HH:MM:SS')])
  for i3 = numel(Eionizations):-1:1,
    iLim = find(Es>Eionizations(i3),1,'first');
    for i2 = iLim:numel(Es),
      if min(E_parameters)<Es(i2) & Es(i2) < max(E_parameters)
        A = interp1(E_parameters,A_p,Es(i2));
        B = interp1(E_parameters,B_p,Es(i2));
      elseif Es(i2) <= min(E_parameters)
        A = A_p(1);
        B = B_p(1);
      else
        A = A_p(end); 
        B = B_p(end);
      end
      iHalf = find(Es<(Es(i2)-Eionizations(i3))/2,1,'last');
      for i1 = iHalf:(i2-1),
        Eprime = [Es(i2),Es(i2)+dE(i2)];
        Edeg = [Es(i1),Es(i1)+dE(i1)];
        fun = @(E1,E2) B./( 1 + ((E2-Eionizations(i3)-E1)/A).^(5/3) );
        Emin = @(E) max(Eprime(1),E+Eionizations(i3));           
        Edegmax = min(Es(i1)+dE(i1),Es(i2)+dE(i2)-Eionizations(i3));
        if Edegmax > Es(i1)
          Q(i2,i1,i3) = integral2(fun,Es(i1),Edegmax,Emin,Eprime(end));
        end
      end
    end
    disp(['Done with level ',num2str(i3),' at: ',datestr(now,'HH:MM:SS')])
  end

  % Save the results for future use
  save_filename = sprintf('CascadingSpecOionization_%s.mat',...
  datestr(now,'yyyymmdd-HHMMSS'));
  save(fullfile(AURORA_root_directory,...
  'E_cascadings','O',...
  save_filename),...
  'Q',...
  'E4Q',...
  'Eionizations')
end

if strcmp(s_or_c,'s')
  % Differential cross-section
  Xs = B./( 1 + (Es/A).^(5/3) ).*(Es < (Ep-Eionization)/2 ); % Should
                                                        % be 5/3
                                                        % not (6/3)
  
else
  
  [DE,iLevel] = min(abs(Eionization-Eionizations));
  [DE2,iPrimary] = min(abs(E4Q-E0in));
  Xs = Q(iPrimary,1:numel(Es),iLevel);
  
end

% Xs = 3*( log(2*A^(2/3) + (5^.5-1)*Es^(1/3)*A^(1/3) + 2*Es^(2/3) ) /(5-5^(3/2))/A^(2/3) + log(2*A^(2/3) + (-5^.5-1)*Es^(1/3)*A^(1/3) + 2*Es^(2/3) ) /(5+5^(3/2))/A^(2/3) + log(A^(1/3)+x^(1/3))/(5*A^(2/3)) - 2 * atan( (A*(5^.5-1) + 4*Es)/( (2*5^.5 +10)^.5*A^(1/3) ) )/(5^.5 * ( 2*5^.5 + 10 )*A^(2/3)) + 2 * atan( (A*(-5^.5-1) + 4*Es)/( (-2*5^.5 +10)^.5*A^(1/3) ) )/(5^.5 * ( -2*5^.5 + 10 )*A^(2/3)))*A^(5/3)*B;

% Xs = -A*B*( atan(Es(1:end)/A) - atan(Es([2:end,end])/A) );

% $$$ if 0
% $$$   % That was nothing, look at THIS! ~7340 chars!
% $$$   ert = 
% $$$     @(E1,E2,X,a,b)E1.^(1.0./3.0).*a.^(5.0./3.0).*b.*(-2.999999999999999)+E1.^(2.0./3.0).*a.^(4.0./3.0).*b.*7.840355822033438e-17+E2.^(1.0./3.0).*a.^(5.0./3.0).*b.*2.999999999999999-E2.^(2.0./3.0).*a.^(4.0./3.0).*b.*7.840355822033438e-17+a.^2.*b.*log((E1+X).^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32-1.236041985183381e32i)).*(4.854101966249677e-1+3.526711513754837e-1i)+a.^2.*b.*log((E1+X).^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32+1.236041985183381e32i)).*(4.854101966249677e-1-3.526711513754837e-1i)+a.^2.*b.*log((E2+X).^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32-1.236041985183381e32i)).*(-4.854101966249677e-1-3.526711513754837e-1i)+a.^2.*b.*log((E2+X).^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32+1.236041985183381e32i)).*(-4.854101966249677e-1+3.526711513754837e-1i)+a.^2.*b.*log((E1+X).^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30-2.091459287371088e31i)).*(-1.854101966249686e-1+5.706339097770922e-1i)+a.^2.*b.*log((E1+X).^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30+2.091459287371088e31i)).*(-1.854101966249686e-1-5.706339097770922e-1i)+a.^2.*b.*log((E2+X).^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30-2.091459287371088e31i)).*(1.854101966249686e-1-5.706339097770922e-1i)+a.^2.*b.*log((E2+X).^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30+2.091459287371088e31i)).*(1.854101966249686e-1+5.706339097770922e-1i)-a.^2.*b.*log((E1+X).^(1.0./3.0)+a.^(1.0./3.0)).*(3.0./5.0)+a.^2.*b.*log((E2+X).^(1.0./3.0)+a.^(1.0./3.0)).*(3.0./5.0)+a.^2.*b.*log(E1.^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32-1.236041985183381e32i)).*(-4.854101966249677e-1-3.526711513754837e-1i)+a.^2.*b.*log(E1.^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32+1.236041985183381e32i)).*(-4.854101966249677e-1+3.526711513754837e-1i)+a.^2.*b.*log(E2.^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32-1.236041985183381e32i)).*(4.854101966249677e-1+3.526711513754837e-1i)+a.^2.*b.*log(E2.^(1.0./3.0).*2.102880227706607e32+a.^(1.0./3.0).*(-1.701265841349703e32+1.236041985183381e32i)).*(4.854101966249677e-1-3.526711513754837e-1i)+a.^2.*b.*log(E1.^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30-2.091459287371088e31i)).*(1.854101966249686e-1-5.706339097770922e-1i)+a.^2.*b.*log(E1.^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30+2.091459287371088e31i)).*(1.854101966249686e-1+5.706339097770922e-1i)+a.^2.*b.*log(E2.^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30-2.091459287371088e31i)).*(-1.854101966249686e-1+5.706339097770922e-1i)+a.^2.*b.*log(E2.^(1.0./3.0).*2.199090434202986e31+a.^(1.0./3.0).*(6.795563163361048e30+2.091459287371088e31i)).*(-1.854101966249686e-1-5.706339097770922e-1i)+a.^2.*b.*log(E1.^(1.0./3.0)+a.^(1.0./3.0)).*(3.0./5.0)-a.^2.*b.*log(E2.^(1.0./3.0)+a.^(1.0./3.0)).*(3.0./5.0)-a.^(4.0./3.0).*b.*(E1+X).^(2.0./3.0).*7.840355822033438e-17+a.^(5.0./3.0).*b.*(E1+X).^(1.0./3.0).*2.999999999999999+a.^(4.0./3.0).*b.*(E2+X).^(2.0./3.0).*7.840355822033438e-17-a.^(5.0./3.0).*b.*(E2+X).^(1.0./3.0).*2.999999999999999+X.*a.*b.*log((E1+X).^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1-5.706339097770923e-1i)+X.*a.*b.*log((E1+X).^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1+5.706339097770923e-1i)+X.*a.*b.*log((E2+X).^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1+5.706339097770923e-1i)+X.*a.*b.*log((E2+X).^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1-5.706339097770923e-1i)-E1.*a.*b.*log((E1+X).^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)+E2.*a.*b.*log((E2+X).^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)-X.*a.*b.*log((E1+X).^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)+X.*a.*b.*log((E2+X).^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)+E1.*a.*b.*log(E1.^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1+5.706339097770923e-1i)+E1.*a.*b.*log(E1.^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1-5.706339097770923e-1i)+E2.*a.*b.*log(E2.^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1-5.706339097770923e-1i)+E2.*a.*b.*log(E2.^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1+5.706339097770923e-1i)+E1.*a.*b.*log(E1.^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)-E2.*a.*b.*log(E2.^(1.0./3.0).*8.1e1+a.^(1.0./3.0).*8.1e1).*(3.0./5.0)+E1.*a.*b.*log((E1+X).^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1+3.526711513754839e-1i)+E1.*a.*b.*log((E1+X).^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1-3.526711513754839e-1i)+E2.*a.*b.*log((E2+X).^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1-3.526711513754839e-1i)+E2.*a.*b.*log((E2+X).^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1+3.526711513754839e-1i)+X.*a.*b.*log((E1+X).^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1+3.526711513754839e-1i)+X.*a.*b.*log((E1+X).^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1-3.526711513754839e-1i)+X.*a.*b.*log((E2+X).^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1-3.526711513754839e-1i)+X.*a.*b.*log((E2+X).^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1+3.526711513754839e-1i)+E1.*a.*b.*log((E1+X).^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1-5.706339097770923e-1i)+E1.*a.*b.*log((E1+X).^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(-1.854101966249685e-1+5.706339097770923e-1i)+E2.*a.*b.*log((E2+X).^(1.0./3.0).*(-6.553037654437077e1-4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1+5.706339097770923e-1i)+E2.*a.*b.*log((E2+X).^(1.0./3.0).*(-6.553037654437077e1+4.761060543569036e1i)+a.^(1.0./3.0).*8.1e1).*(1.854101966249685e-1-5.706339097770923e-1i)+E1.*a.*b.*log(E1.^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1-3.526711513754839e-1i)+E1.*a.*b.*log(E1.^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(-4.854101966249684e-1+3.526711513754839e-1i)+E2.*a.*b.*log(E2.^(1.0./3.0).*(1.803628711650741e18-5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1+3.526711513754839e-1i)+E2.*a.*b.*log(E2.^(1.0./3.0).*(1.803628711650741e18+5.550998393024096e18i)+a.^(1.0./3.0).*5.836665117072163e18).*(4.854101966249684e-1-3.526711513754839e-1i)
% $$$ 
% $$$     % This should be the integral: 
% $$$     % \int_0^dE\int_{E(iE)-E(jE+1)+\epsilon}^{E(iE)-E(jE)+\epsilon}P_s(E')dE'd\epsilon
% $$$     % Which should be the cascading distribution of electrons from
% $$$     % an energy-bin [E(iE) E(iE) + dE]
% $$$ end


% $$$ DE dEion Ei Ej Ejp1 X
% $$$ E1 = (Ei-dEion-Ejp1+X)
% $$$ E2 = (Ei-dEion-Ej+X)
% $$$ 
% $$$ asd2 = (3*A*B*log(81*((E2+X)/A)^(1/3) + 81))/5 - (3*A*B*log(81* ...
% $$$                                                   ((E1+X)/A)^(1/3) + 81))/5 + A*B*log(81 - 375*((E1+X)/A)^(1/3)*((3*5^(1/2))/20 - (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20)^3)*((3*5^(1/2))/20 - (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20) + A*B*log(81 - 375*((E1+X)/A)^(1/3)*((3*5^(1/2))/20 + (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20)^3)*((3*5^(1/2))/20 + (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20) - A*B*log(81 - 375*((E2+X)/A)^(1/3)*((3*5^(1/2))/20 - (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20)^3)*((3*5^(1/2))/20 - (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20) - A*B*log(81 - 375*((E2+X)/A)^(1/3)*((3*5^(1/2))/20 + (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20)^3)*((3*5^(1/2))/20 + (3*2^(1/2)*(5^(1/2) - 5)^(1/2))/20 + 3/20) + A*B*log(81 - 375*((E1+X)/A)^(1/3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 - (3*5^(1/2))/20 + 3/20)^3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 - (3*5^(1/2))/20 + 3/20) - A*B*log(375*((E1+X)/A)^(1/3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 + (3*5^(1/2))/20 - 3/20)^3 + 81)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 + (3*5^(1/2))/20 - 3/20) - A*B*log(81 - 375*((E2+X)/A)^(1/3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 - (3*5^(1/2))/20 + 3/20)^3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 - (3*5^(1/2))/20 + 3/20) + A*B*log(375*((E2+X)/A)^(1/3)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 + (3*5^(1/2))/20 - 3/20)^3 + 81)*((3*2^(1/2)*(- 5^(1/2) - 5)^(1/2))/20 + (3*5^(1/2))/20 - 3/20)
% $$$ for i3 = numel(Eworks):-1:1,
% $$$   iLim = find(E>Eworks(i3),1,'first')
% $$$   for i2 = iLim:numel(E),
% $$$     Ep = E(i2);
% $$$     if min(E_parameters)<Ep & Ep < max(E_parameters)
% $$$       A = interp1(E_parameters,A_p,Ep);
% $$$       B = interp1(E_parameters,B_p,Ep);
% $$$     elseif Ep <= min(E_parameters)
% $$$       A = A_p(1);
% $$$       B = B_p(1);
% $$$     else
% $$$       A = A_p(end);
% $$$       B = B_p(end);
% $$$     end
% $$$     iHalf = find(E<(E(i2)-Eworks(i3))/2,1,'last');
% $$$     for i1 = iHalf:min(numel(E),(i2+1)),     
% $$$       Eprime = linspace(E(i2),E(i2)+dE(i2),10); 
% $$$       Efine = linspace(E(i1),E(i1)+dE(i1),10);
% $$$       %[E1,E2] = meshgrid(Efine,Eprime);
% $$$       fun = @(E1,E2)heaviside(E2-Eworks(i3)-E1).*B./( 1 + ((E2-Eworks(i3)-E1)/A).^(5/3));
% $$$       % fun = @(x,y) interp2(E1,E2,f,x,y);
% $$$       Q(i2,i1) = integral2(fun,E(i1),E(i1)+dE(i1),Eprime(1),Eprime(end));
% $$$     end
% $$$     if rem(i2,10) == 0
% $$$       disp(sprintf('%d: %s',i2,datestr(now,'HH:MM:SS')))
% $$$     end
% $$$   end
% $$$   Eall = E;
% $$$   save load CascadingSpecOionization.mat Q Eall Eworks
% $$$   
% $$$ end
